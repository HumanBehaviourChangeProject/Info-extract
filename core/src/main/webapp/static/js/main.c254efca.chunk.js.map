{"version":3,"sources":["components/Header.tsx","components/category-table/CategoryNameLabel.tsx","components/category-table/attributes/NoAttributesNode.tsx","components/category-table/attributes/PlusNode.tsx","support/comparison.tsx","components/category-table/selectors/NumericSelector.tsx","definitions/redux.actions.tsx","components/category-table/selectors/CategorySelector.tsx","components/category-table/attributes/SelectedAttributeOverview.tsx","redux/actions.results-exploration.tsx","support/Alert.tsx","redux/actions.attributes-selection.tsx","components/category-table/CategoryRow.tsx","components/category-table/attributes/AddAttributeRow.tsx","components/category-table/attributes/CategorySwitch.tsx","components/category-table/attributes/AttributesDialog.tsx","components/category-table/CategoryTable.tsx","components/category-table/index.tsx","components/results-viewer/SimilarityFlags.tsx","components/results-viewer/SummaryTable.tsx","components/results-viewer/SingleResult.tsx","components/results-viewer/ResultsList.tsx","components/results-viewer/ResultsViewer.tsx","components/results-viewer/index.tsx","components/predicted-outcome/PredictedOutcomeValue.tsx","components/App.tsx","redux/actions.bootstrap.tsx","redux/reducer.tsx","index.tsx","redux/store.tsx"],"names":["Header","headerClass","this","props","isLoading","hasError","className","React","connect","state","dispatch","CategoryNameLabel","nextProps","category","NoAttributesNode","PlusNode","onClick","onOpenCategory","simpleCompare","e1","e2","sameArray","array1","array2","sameElement","compare","length","i","sameFields","obj1","obj2","fields","chain","p1","p2","j","property","TypeKeys","onlyDigits","RegExp","NumericSelector","numericInput","value","test","onValueChange","delta","parsedValue","parseInt","stringValue","isNaN","toString","evt","key","setState","updateStringValue","preventDefault","stopPropagation","compact","type","size","Math","floor","ref","input","onChange","updateTempValue","target","onKeyDown","keyPressed","preventCursorShift","onKeyUp","CategorySelector","selected","options","map","o","SelectedAttributeOverview","selector","attribute","definition","selection","valueType","values","name","onClear","latestRequestTimestamp","showError","message","toast","error","showWarning","warn","timeout","ms","Promise","resolve","setTimeout","EMPTY_RESULTS","SET_RESULTS","payload","results","predictedOutcomeValue","undefined","followUp","fetchResults","a","START_LOADING_RESULTS","currentTimestamp","Date","getTime","isSameRequest","axios","post","response","action","data","console","FINISH_LOADING_RESULTS","updateResults","getState","CLEAR_RESULTS","createModifyAttributePayload","id","clearAttribute","attributeId","ATTRIBUTE_CLEARED","updateAttribute","ATTRIBUTE_UPDATED","CategoryRow","selectedAttributes","attributesList","att","ownProps","categories","find","cat","Error","filter","s","attributes","some","sel","AddAttributeRow","defaultValue","nextState","selectAttribute","isEnabled","enabled","handleValueChange","handleClick","ATTRIBUTE_SELECTED","CategorySwitch","clazz","onSwitchCategory","sameSelectedAttribute","a1","a2","AttributesDialog","showAttributes","containers","c","hasUnavailableAttributes","Drawer","anchor","open","onClose","DialogTitle","Switch","checked","color","DialogContent","container","CategoryTable","openCategory","categoryNames","LightTooltip","withStyles","theme","tooltip","backgroundColor","palette","common","white","boxShadow","shadows","fontSize","Tooltip","SimilarityFlags","result","isSimilarIntervention","isSimilarPopulation","title","collapsedIcon","outcomeIcon","similarAttributesIcon","leftDataIcon","intersectionDataIcon","rightDataIcon","BCTs","ItalicCommaSeparetedList","forEach","push","noTitle","SummaryTable","collapsed","outcomeValue","attributeSimilarities","similarity","toFixed","interventions","interventionsOnlyInQuery","int","trim","interventionsInCommon","interventionsOnlyInArm","wrap","getOutcomeValue","getSimilarAttributes","getInterventionsInQuery","getInterventionsInCommon","getInterventionsInArm","SingleResult","ResultsList","r","doc","ResultsViewer","hasSelection","isFetchingResults","PredictedOutcomeValue","hasFollowUp","hasOutcomeValue","predictedValueString","hasResults","App","bootstrap","toastClassName","position","autoClose","hideProgressBar","pauseOnHover","closeOnClick","pauseOnFocusLoss","get","categoryList","ReduxActions","BOOTSTRAP_DONE","reducer","REDUX_INIT","update","$push","pos","findIndex","$set","configuredStore","initialState","middleware","applyMiddleware","thunk","logger","createStore","configureStore","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.c254efca.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StoreDefinition } from '../definitions/redux.store';\nimport * as ReduxActions from '../definitions/redux.actions';\n// import * as ActionCall from '../../redux/actions';\nimport { connect } from 'react-redux';\nimport \"../style/Header.scss\"\n\ninterface HeaderStoreProps {\n  isLoading: boolean;\n  hasError: boolean;\n}\n\ninterface HeaderDispatchProps { }\n\nconst mapStateToProps = (state: StoreDefinition): HeaderStoreProps => ({\n  isLoading: false,\n  hasError: false,\n});\n\nconst mapActionsToProps = (dispatch: ReduxActions.StoreDispatch) => ({ });\n\ntype HeaderProps = HeaderStoreProps & HeaderDispatchProps;\n\nclass Header extends React.Component<HeaderProps> {\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n\n    const headerClass = 'Header' + \n              (this.props.isLoading ? ' loading' : '') + \n              (this.props.hasError ? ' error' : '');\n\n    return (\n      <div className={headerClass}>\n        <div className=\"leftSide\">\n          <span className=\"logo\" />\n          <span><b>IBM Research &bull; HBCP</b> Prediction App</span>\n        </div>\n        <div className=\"rightSide\">\n          {/* <div className=\"playButton\" onClick={() => this.props.runPipeline()} /> */}\n          {/* {this.props.children} */}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect<HeaderStoreProps, HeaderDispatchProps, { }, StoreDefinition>(mapStateToProps, mapActionsToProps)(Header);\n","import * as React from 'react';\nimport \"../../style/category-table/CategoryNameLabel.scss\";\n\ninterface Props {\n  category: string;\n}\n\nexport class CategoryNameLabel extends React.Component<Props> {\n\n  shouldComponentUpdate(nextProps: Props) {\n    return nextProps.category !== this.props.category;\n  }\n\n  render() {\n\n    return (\n      <div className=\"category-name-label\">\n        <div className=\"flex-container\">\n          <div className=\"text-container\">{this.props.category}</div>\n          <div className=\"border-arrow\"/>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import * as React from 'react';\nimport \"../../../style/category-table/NoAttributesNode.scss\";\n\nexport class NoAttributesNode extends React.Component {\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n\n    return (\n      <div className=\"no-attributes-node\">\n        No attribute selected\n      </div>\n    );\n  }\n\n}\n","import * as React from 'react';\nimport \"../../../style/category-table/PlusNode.scss\";\n// import AttributesDialog from './AttributesDialog';\n\ninterface Props {\n  // category: string;\n  onOpenCategory(): void;\n}\n\n// interface State {\n//   dialogOpen: boolean;\n// }\n\nexport class PlusNode extends React.Component<Props> {\n\n  // constructor(props: Props) {\n  //   super(props);\n  //   this.state = { dialogOpen: false };\n  // }\n\n  shouldComponentUpdate(nextProps: Props) {\n\n    // if (this.state.dialogOpen !== nextState.dialogOpen)\n    //   return true;\n\n    // if (this.props.category !== nextProps.category)\n    //   return true;\n\n    return false;\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"plus-node\"\n        onClick={() => this.props.onOpenCategory()}\n      />\n    );\n\n    // return (\n    //   <React.Fragment>\n    //     <div className=\"plus-node\"\n    //       onClick={() => this.setState({ dialogOpen: true })}\n    //     />\n    //     <AttributesDialog\n    //       category={this.props.category}\n    //       open={this.state.dialogOpen}\n    //       onClose={() => this.setState({ dialogOpen: false })}\n    //     />\n    //   </React.Fragment>\n    // );\n  }\n\n}\n","\nconst simpleCompare = (e1: any, e2: any) => e1 === e2;\n\nexport function sameArray<T>(array1: T[], array2: T[], sameElement?: (e1: T, e2: T) => boolean): boolean {\n\n  const compare = sameElement || simpleCompare;\n\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  for (let i=0; i<array1.length; i++) {\n    if (!compare(array1[i], array2[i])) {\n      return false;\n    }\n  }\n\n  return true;\n\n}\n\n// e.g. prop could be like { isVisible: true, attribute: { id: 1 } }\n//      fields are isVisible and attribute.id, which are encoded as [\"isVisible\"] and [\"attribute\", \"id\"]\nexport function sameFields(obj1: any, obj2: any, fields: string[][]): boolean {\n  \n  for(let i=0; i<fields.length; i++) {\n  \n    // chain = [\"attribute\", \"id\"]\n    const chain = fields[i];\n    let p1=obj1; // { attribute: { id: 1 } }\n    let p2=obj2; // { attribute: { id: 2 } }\n  \n    for(let j=0; j<chain.length; j++) {\n      const property = chain[j];\n      p1 = p1[property];\n      p2 = p2[property];\n    }\n  \n    if (p1 !== p2) {\n      return false;\n    }\n  \n  }\n  \n  return true;\n\n}","import * as React from 'react';\nimport \"../../../style/category-table/selectors/NumericSelector.scss\"\nimport { sameFields } from '../../../support/comparison';\n\ninterface Props {\n  stringValue: string;\n  compact?: boolean;\n  onValueChange(value: string): void;\n}\n\nconst onlyDigits = new RegExp(/^-?\\d*$/);\n\nexport class NumericSelector extends React.Component<Props> {\n\n  numericInput: HTMLInputElement | null = null;\n\n  shouldComponentUpdate(nextProps: Props) {\n    if (!sameFields(this.props, nextProps, [ [\"stringValue\"], [\"compact\"] ])) {\n      return true;\n    }\n    return false;\n  }\n\n  updateTempValue(value: string) {\n    if (value.length === 0 || onlyDigits.test(value)) {\n      // this.setState({ stringValue: value });\n      this.props.onValueChange(value);\n    }\n  }\n\n  updateStringValue(delta: number) {\n\n    // NOTE: in Javascript 10000000000000000 + 1 will return 10000000000000000\n    let parsedValue = parseInt(this.props.stringValue);\n\n    if (isNaN(parsedValue)) {\n      parsedValue = 0;\n    }\n\n    // this.setState({ stringValue: (parsedValue + delta).toString() });\n    this.props.onValueChange((parsedValue + delta).toString());\n\n  }\n\n\n  keyPressed(evt: React.KeyboardEvent) {\n    \n    if (evt.key === \"Enter\") {\n\n      // this.finishUpdate();\n\n    } else if (evt.key === \"ArrowUp\" || evt.key === \"ArrowDown\") {\n\n      // There is nothing in the box\n      if (this.props.stringValue.length === 0) {\n        evt.key === \"ArrowUp\"   && this.setState({ stringValue:  \"1\" });\n        evt.key === \"ArrowDown\" && this.setState({ stringValue: \"-1\" });\n      } else {\n        evt.key === \"ArrowUp\"  && this.updateStringValue(+1);\n        evt.key === \"ArrowDown\"&& this.updateStringValue(-1);\n      }\n\n    }\n\n  }\n\n  preventCursorShift(evt: React.KeyboardEvent) {\n    if (evt.key === \"ArrowUp\" || evt.key === \"ArrowDown\") {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }\n  }\n\n  render() {\n\n    return (\n      <span\n        className={`numeric-selector ${this.props.compact === true ? \"compact\" : \"\"}`}\n        onClick={evt => { evt.preventDefault(); evt.stopPropagation(); }}\n      >\n        <input\n          type=\"text\"\n          // This is because size is not really proportional to the number of digits\n          size={Math.floor((this.props.stringValue.length))}\n          value={this.props.stringValue}\n          ref={(input) => { this.numericInput = input; }} \n          onChange={evt => this.updateTempValue(evt.target.value)}\n          onKeyDown={evt => { this.keyPressed(evt); this.preventCursorShift(evt); }}\n          onKeyUp={evt => this.preventCursorShift(evt)}\n        />\n        <span className=\"update-button\" onClick={() => this.updateStringValue(-1)}>\n          -\n        </span>\n        <span className=\"update-button\" onClick={() => this.updateStringValue(+1)}>\n          +\n        </span>\n      </span>\n    );\n  }\n\n}\n","import { ThunkDispatch } from 'redux-thunk';\nimport { StoreDefinition } from './redux.store';\nimport { Action } from 'redux';\nimport { AttributeValue, CategoryList, ArmSimilarityResult } from './hbcp-declarations';\nimport { ThunkAction } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { PredictionResponse } from './server-responses';\n\nexport enum TypeKeys {\n  REDUX_INIT             = '@@redux/INIT',\n  BOOTSTRAP_DONE         = 'BOOTSTRAP_DONE',\n  ATTRIBUTE_SELECTED     = 'ATTRIBUTE_SELECTED',\n  ATTRIBUTE_UPDATED      = 'ATTRIBUTE_UPDATED',\n  ATTRIBUTE_CLEARED      = 'ATTRIBUTE_CLEARED',\n  START_LOADING_RESULTS  = 'START_LOADING_RESULTS',\n  FINISH_LOADING_RESULTS = 'FINISH_LOADING_RESULTS',\n  SET_RESULTS            = 'SET_RESULTS',\n  CLEAR_RESULTS          = 'CLEAR_RESULTS',\n}\n\nexport interface ReduxInit {\n  type: TypeKeys.REDUX_INIT;\n}\n\nexport interface BootrstrapDone {\n  type: TypeKeys.BOOTSTRAP_DONE;\n  payload: CategoryList;\n}\n\nexport interface AttributeSelected {\n  type: TypeKeys.ATTRIBUTE_SELECTED;\n  payload: {\n    selection: AttributeValue;\n  };\n}\n\nexport interface AttributeUpdated {\n  type: TypeKeys.ATTRIBUTE_UPDATED;\n  payload: {\n    selection: AttributeValue;\n  };\n}\n\nexport interface AttributeCleared {\n  type: TypeKeys.ATTRIBUTE_CLEARED;\n  payload: {\n    attributeId: string;\n  };\n}\n\nexport interface StartLoadingResults {\n  type: TypeKeys.START_LOADING_RESULTS;\n}\n\nexport interface FinishLoadingResults {\n  type: TypeKeys.FINISH_LOADING_RESULTS;\n}\n\nexport interface SetResults {\n  type: TypeKeys.SET_RESULTS;\n  payload: PredictionResponse;\n}\n\nexport interface ClearResults {\n  type: TypeKeys.CLEAR_RESULTS;\n}\n\nexport type ActionTypes =\n      | ReduxInit\n      | BootrstrapDone\n      | AttributeSelected\n      | AttributeUpdated\n      | AttributeCleared\n      | StartLoadingResults\n      | FinishLoadingResults\n      | SetResults\n      | ClearResults;\n\nexport type StoreDispatch = ThunkDispatch<StoreDefinition, void, Action>;\n\nexport type TypedAction<T> = ThunkAction<T, StoreDefinition, void, AnyAction>;\n// type PromisedAction = TypedAction<Promise<void>>;\n// type ResponseAction = TypedAction<Promise<{ data: \"blah\" }>>;\nexport type VoidAction = ThunkAction<void, StoreDefinition, void, AnyAction>;\n\n","import * as React from 'react';\nimport \"../../../style/category-table/selectors/CategorySelector.scss\"\nimport { sameArray } from '../../../support/comparison';\n\ninterface Props {\n  selected: string;\n  options: string[];\n  compact?: boolean;\n  onValueChange(value: string): void;\n}\n\nexport class CategorySelector extends React.Component<Props> {\n\n  shouldComponentUpdate(nextProps: Props) {\n    if (nextProps.selected !== this.props.selected) {\n      return true;\n    }\n    if (!sameArray(nextProps.options, this.props.options)) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n\n    return (\n      <span\n        className={`category-selector ${this.props.compact ? \"compact\" : \"\"}`}\n        onClick={evt => { evt.preventDefault(); evt.stopPropagation(); }}\n      >\n        <select\n          className=\"category-selector\"\n          value={this.props.selected}\n          onChange={evt => this.props.onValueChange(evt.target.value)}\n        >\n          {this.props.options.map((o, i) => <option key={i} value={o}>{o}</option>)}\n        </select>\n      </span>\n    );\n  }\n\n}\n","import * as React from 'react';\nimport { Attribute, AttributeValue } from '../../../definitions/hbcp-declarations';\nimport \"../../../style/category-table/SelectedAttributeOverview.scss\";\nimport { NumericSelector } from '../selectors/NumericSelector';\nimport { CategorySelector } from '../selectors/CategorySelector';\nimport { sameFields } from '../../../support/comparison';\n\ninterface Props {\n  definition: Attribute,\n  selection: AttributeValue,\n  onValueChange(value: string): void,\n  onClear(): void\n}\n\nexport class SelectedAttributeOverview extends React.Component<Props> {\n\n  shouldComponentUpdate(nextProps: Props) {\n    if (!sameFields(this.props, nextProps, [ [\"definition\", \"id\"], [\"selection\", \"value\"] ])) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n\n    const attribute = this.props.definition;\n\n    const value = this.props.selection.value.toString();\n\n    let selector;\n\n    if (attribute.valueType.valueType === \"numeric\") {\n      selector = <NumericSelector compact stringValue={value} onValueChange={value => this.props.onValueChange(value)} />\n    } else if (attribute.valueType.valueType === \"category\") {\n      selector = <CategorySelector compact options={attribute.valueType.values} selected={value} onValueChange={value => this.props.onValueChange(value)} />\n    }\n\n    return (\n      <div className=\"selected-attribute-overview\">\n        {attribute.name}\n        {attribute.valueType.valueType === \"boolean\" ? \"\" : \": \"}\n        {selector}\n        <div className=\"close-icon\" onClick={() => this.props.onClear()}></div>\n      </div>\n    );\n  }\n\n}\n","// import { showError } from '../controller/Alert';\nimport axios from 'axios';\nimport { showError } from '../support/Alert';\nimport { PredictionResponse } from '../definitions/server-responses';\nimport { AttributeValue } from '../definitions/hbcp-declarations';\nimport { VoidAction, TypeKeys, StartLoadingResults, FinishLoadingResults, SetResults } from '../definitions/redux.actions';\n\nfunction timeout(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction startLoadingResults(): StartLoadingResults {\n  return { type: TypeKeys.START_LOADING_RESULTS };\n}\n\nfunction finishLoadingResults(): FinishLoadingResults {\n  return { type: TypeKeys.FINISH_LOADING_RESULTS };\n}\n\nlet latestRequestTimestamp: number;\n\n// If there has been an error, I render an empty results instead\nconst EMPTY_RESULTS: SetResults = { type: TypeKeys.SET_RESULTS, payload: { results: [], predictedOutcomeValue: undefined, followUp: undefined } };\n\nfunction fetchResults(selection: AttributeValue[]): VoidAction {\n  return async dispatch => {\n\n    dispatch( startLoadingResults() );\n    const currentTimestamp = new Date().getTime();\n    latestRequestTimestamp = currentTimestamp;\n    const isSameRequest = () => latestRequestTimestamp === currentTimestamp;\n\n    await timeout(200);\n    if (!isSameRequest()) { return; }\n\n    try {\n      //const response = await axios.get<SimilarityResponse>(\"/api/predict/mockrelevantdocs\");\n      const response = await axios.post<PredictionResponse>(\"/api/predict/insights\", selection);\n      const action: SetResults = { type: TypeKeys.SET_RESULTS, payload: response.data };\n      isSameRequest() && dispatch( action );\n    } catch(err) {\n      console.error(\"Impossible to fetch the results.\", err);\n      showError(\"Impossible to fetch the results.\");\n      isSameRequest() && dispatch( EMPTY_RESULTS );\n    } finally {\n      isSameRequest() && dispatch( finishLoadingResults() );\n    }\n\n  };\n}\n\nexport function updateResults(): VoidAction {\n  return async (dispatch, getState) => {\n\n    const selection = getState().selection;\n\n    if (selection.length === 0) {\n      dispatch({ type: TypeKeys.CLEAR_RESULTS });\n    } else {\n      dispatch( fetchResults(selection) );\n    }\n\n  };\n}","import { toast } from 'react-toastify';\n\nexport function showError (message: string) {\n  toast.error(message);\n}\n\nexport function showWarning (message: string) {\n  toast.warn(message);\n}\n\nexport function showInfo (message: string) {\n  toast.info(message);\n}","// import { showError } from '../controller/Alert';\nimport { Attribute, AttributeValue } from '../definitions/hbcp-declarations';\nimport { VoidAction, AttributeCleared, AttributeUpdated, TypeKeys, AttributeSelected } from '../definitions/redux.actions';\nimport { updateResults } from \"./actions.results-exploration\";\n\nfunction createModifyAttributePayload(attribute: Attribute, stringValue: string): AttributeValue {\n\n  const id = attribute.id;\n  const type = attribute.valueType.valueType;\n\n  if (type === \"numeric\") {\n    const parsedValue = parseInt(stringValue);\n    return { id, type, value: isNaN(parsedValue) ? 0 : parsedValue };\n  } else if (type === \"category\" ) {\n    return { id, type, value: stringValue };\n  } else {\n    return { id, type, value: true };\n  }\n\n}\n\nexport function selectAttribute(attribute: Attribute, stringValue: string): VoidAction {\n  return async dispatch => {\n    const action: AttributeSelected = {\n      type: TypeKeys.ATTRIBUTE_SELECTED,\n      payload: { selection: createModifyAttributePayload(attribute, stringValue) }\n    };\n    dispatch(action);\n    dispatch( updateResults() );\n  };\n}\n\nexport function clearAttribute(attributeId: string): VoidAction {\n  return async dispatch => {\n    const action: AttributeCleared = {\n      type: TypeKeys.ATTRIBUTE_CLEARED,\n      payload: { attributeId }\n    }\n    dispatch(action);\n    dispatch( updateResults() );\n  };\n}\n\nexport function updateAttribute(attribute: Attribute, stringValue: string): VoidAction {\n  return async dispatch => {\n    const action: AttributeUpdated = {\n      type: TypeKeys.ATTRIBUTE_UPDATED,\n      payload: { selection: createModifyAttributePayload(attribute, stringValue) }\n    }\n    dispatch(action);\n    dispatch( updateResults() );\n  };\n}","import * as React from 'react';\nimport { StoreDefinition } from '../../definitions/redux.store';\nimport * as ReduxActions from '../../definitions/redux.actions';\nimport { connect } from 'react-redux';\nimport FlipMove from 'react-flip-move';\nimport { CategoryNameLabel } from './CategoryNameLabel';\nimport { NoAttributesNode } from './attributes/NoAttributesNode';\nimport { PlusNode } from './attributes/PlusNode';\nimport \"../../style/category-table/CategoryRow.scss\";\nimport { Attribute, AttributeValue } from '../../definitions/hbcp-declarations';\nimport { SelectedAttributeOverview } from './attributes/SelectedAttributeOverview';\nimport { sameArray } from '../../support/comparison';\nimport { clearAttribute, updateAttribute } from '../../redux/actions.attributes-selection';\n\ninterface SelectedAttribute {\n  definition: Attribute,\n  selection: AttributeValue\n}\n\ninterface PropsFromStore {\n  selectedAttributes: SelectedAttribute[];\n}\n\ninterface DispatchProps {\n  clearAttribute(attributeId: string): void;\n  updateAttribute(attribute: Attribute, value: string): void;\n}\n\ninterface OwnProps {\n  category: string;\n  onOpenCategory(): void;\n}\n\nconst mapStateToProps = (state: StoreDefinition, ownProps: OwnProps): PropsFromStore => {\n\n  const category = state.categories.find(cat => cat.name === ownProps.category);\n\n  if (category === undefined) {\n    throw new Error(\"Category not found, invalid state.\");\n  }\n\n  const selection = state.selection.filter(s => category.attributes.some(att => att.id === s.id));\n\n  const selectedAttributes: SelectedAttribute[] = selection.map(sel => ({\n    definition: category.attributes.find(att => att.id === sel.id) as Attribute,\n    selection: sel\n  }));\n\n  return { selectedAttributes }\n\n};\n\nconst mapActionsToProps = (dispatch: ReduxActions.StoreDispatch) => ({ \n  clearAttribute: (attributeId: string) => dispatch( clearAttribute(attributeId) ),\n  updateAttribute: (attribute: Attribute, stringValue: string) => dispatch( updateAttribute(attribute, stringValue) )\n});\n\ntype Props = PropsFromStore & DispatchProps & OwnProps;\n\nclass CategoryRow extends React.Component<Props> {\n\n  shouldComponentUpdate(nextProps: Props) {\n    if (nextProps.category !== this.props.category) {\n      return true;\n    }\n    if (!sameArray(\n          nextProps.selectedAttributes, \n          this.props.selectedAttributes, \n          (e1, e2) => e1.definition.id === e2.definition.id && e1.selection.value === e2.selection.value)\n    ){\n      return true\n    }\n    return false;\n  }\n\n  render() {\n\n    let attributesList: JSX.Element | JSX.Element[] = <NoAttributesNode />;\n\n    if (this.props.selectedAttributes.length > 0) {\n      attributesList = this.props.selectedAttributes.map(att => \n        <SelectedAttributeOverview\n          key={att.definition.id} \n          definition={att.definition}\n          selection={att.selection}\n          onValueChange={value => this.props.updateAttribute(att.definition, value)}\n          onClear={() => this.props.clearAttribute(att.definition.id)} \n        />\n      )\n    }\n\n    return (\n      <div className=\"category-row\">\n        <CategoryNameLabel category={this.props.category} />\n        <FlipMove className=\"attributes-container\">\n          {attributesList}\n          <PlusNode onOpenCategory={() => this.props.onOpenCategory()}/>\n        </FlipMove>\n      </div>\n    );\n  }\n\n}\n\nexport default connect<PropsFromStore, DispatchProps, OwnProps, StoreDefinition>(mapStateToProps, mapActionsToProps)(CategoryRow);\n","import * as React from 'react';\n\nimport { Attribute } from '../../../definitions/hbcp-declarations';\nimport { NumericSelector } from '../selectors/NumericSelector';\nimport \"../../../style/category-table/AddAttributeRow.scss\";\nimport { StoreDefinition } from '../../../definitions/redux.store';\nimport * as ReduxActions from '../../../definitions/redux.actions';\nimport { connect } from 'react-redux';\nimport { CategorySelector } from '../selectors/CategorySelector';\nimport { sameFields } from '../../../support/comparison';\nimport { selectAttribute, updateAttribute, clearAttribute } from '../../../redux/actions.attributes-selection';\n\ninterface PropsFromStore { }\n\ninterface DispatchProps {\n  selectAttribute(attribute: Attribute, value: string): void;\n  updateAttribute(attribute: Attribute, value: string): void;\n  clearAttribute (attributeId: string): void;\n};\n\ninterface OwnProps {\n  attribute: Attribute;\n  selected: boolean;\n  // NOTE: once selected, it's the props which update the state\n  value: string;\n};\n\nconst mapStateToProps = (state: StoreDefinition, ownProps: OwnProps): PropsFromStore => ({ });\n\nconst mapActionsToProps = (dispatch: ReduxActions.StoreDispatch): DispatchProps => ({\n  selectAttribute: (attribute: Attribute, stringValue: string) => dispatch( selectAttribute(attribute, stringValue) ),\n  updateAttribute: (attribute: Attribute, stringValue: string) => dispatch( updateAttribute(attribute, stringValue) ),\n  clearAttribute:  (attributeId: string) => dispatch( clearAttribute(attributeId) )\n});\n\ntype Props = PropsFromStore & DispatchProps & OwnProps;\n\ninterface State {\n  // Value are kept as string, even the numeric (because of text box)\n  value: string;\n}\n\nclass AddAttributeRow extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { value: this.props.attribute.defaultValue.toString() }\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    if(!sameFields(nextProps, this.props, [ [\"attribute\", \"id\"], [\"selected\"], [\"value\"] ] )) {\n      return true;\n    }\n    if (nextState.value !== this.state.value) {\n      return true;\n    }\n    return false;\n  }\n\n  handleValueChange(value: string) {\n    if (this.props.selected) {\n      this.props.updateAttribute(this.props.attribute, value);\n    } else {\n      this.setState({ value })\n    }\n  }\n\n  handleClick() {\n    if (this.props.selected) {\n      // When cleaning, fill the state value again\n      this.setState(\n        { value: this.props.value }, \n        () => this.props.clearAttribute(this.props.attribute.id)\n      );\n    } else {\n      this.props.selectAttribute(this.props.attribute, this.state.value);\n    }\n  }\n\n  render() {\n\n    const isEnabled = this.props.attribute.enabled\n    const attribute = this.props.attribute;\n\n    let selector;\n    const value = this.props.selected ? this.props.value : this.state.value;\n\n    if (isEnabled) {\n      if (attribute.valueType.valueType === \"numeric\") {\n        selector = <NumericSelector stringValue={value} onValueChange={value => this.handleValueChange(value)} />\n      } else if (attribute.valueType.valueType === \"category\") {\n        selector = <CategorySelector options={attribute.valueType.values} selected={value} onValueChange={value => this.handleValueChange(value)} />\n      }\n    }\n\n    let className = \"add-attribute-row\";\n\n    if (this.props.selected) {\n      className += \" selected\";\n    }\n\n    if (!isEnabled) {\n      className += \" disabled\";\n    }\n\n    return (\n        <div\n          className={className}\n          onClick={() => isEnabled && this.handleClick()}\n        >\n          <div className=\"attribute-text\">\n            {attribute.name}\n            {attribute.valueType.valueType === \"boolean\" || !isEnabled ? \"\" : \": \"}\n            {selector}\n          </div>\n          <div className=\"plus-box\" />\n        </div>\n    );\n\n  }\n}\n\nexport default connect<PropsFromStore, DispatchProps, OwnProps, StoreDefinition>(mapStateToProps, mapActionsToProps)(AddAttributeRow);\n","import * as React from 'react';\nimport \"../../../style/category-table/CategorySwitch.scss\";\n\ninterface Props {\n  categories: string[];\n  selected?: string;\n  onSwitchCategory(category: string): void;\n}\n\nexport class CategorySwitch extends React.Component<Props> {\n\n  shouldComponentUpdate(nextProps: Props) {\n    return true;\n  }\n\n  render() {\n\n    return (\n      <div className=\"category-switch\">\n        <div className=\"description\">Showing available attributes for:</div>\n        <div className=\"buttons-container\">\n          {this.props.categories.map((cat, i) => {\n            const clazz = `category-button ${cat === this.props.selected ? \"selected\" : \"\"}`;\n            return (\n              <div\n                key={i}\n                className={clazz}\n                onClick={() => this.props.onSwitchCategory(cat)}\n              >\n                {cat}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Drawer from '@material-ui/core/Drawer';\nimport FlipMove from 'react-flip-move';\n\nimport { StoreDefinition } from '../../../definitions/redux.store';\nimport * as ReduxActions from '../../../definitions/redux.actions';\nimport { Attribute } from '../../../definitions/hbcp-declarations';\nimport \"../../../style/category-table/AttributesDialog.scss\";\nimport AddAttributeRow from './AddAttributeRow';\nimport { sameFields, sameArray } from '../../../support/comparison';\nimport { CategorySwitch } from './CategorySwitch';\nimport Switch from '@material-ui/core/Switch';\n\ninterface SelectedAttribute {\n  attribute: Attribute;\n  selected: boolean;\n  value: string;\n}\n\nconst sameSelectedAttribute = (a1: SelectedAttribute, a2:SelectedAttribute) => a1.attribute.id === a2.attribute.id && a1.selected === a2.selected && a1.value === a2.value;\n\ninterface PropsFromStore {\n  selectedAttributes: SelectedAttribute[];\n  categories: string[];\n}\n\ninterface DispatchProps { };\n\ninterface OwnProps {\n  category?: string;\n  open: boolean\n  onSwitchCategory(category: string): void;\n  onClose(): void;\n};\n\nconst mapStateToProps = (state: StoreDefinition, ownProps: OwnProps): PropsFromStore => {\n\n  const categories = state.categories.map(c => c.name);\n\n  if (ownProps.category === undefined) {\n    return { categories, selectedAttributes: [] }\n  }\n\n  const category = state.categories.find(cat => cat.name === ownProps.category);\n\n  if (category === undefined) {\n    throw new Error(`Category ${ownProps.category} not found!`);\n  }\n  \n  const selectedAttributes = category.attributes.map(att => { \n\n    const selection = state.selection.find(a2 => att.id === a2.id);\n\n    return {\n      attribute: att,\n      selected: selection !== undefined,\n      value: selection ? selection.value.toString() : \"\"\n  }});\n\n  return { categories, selectedAttributes };\n\n};\n\nconst mapActionsToProps = (dispatch: ReduxActions.StoreDispatch): DispatchProps => ({ });\n\ninterface State {\n  showAttributes: boolean;\n}\n\ntype Props = PropsFromStore & DispatchProps & OwnProps;\n\nclass AttributesDialog extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { showAttributes: true };\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n\n    if (this.state.showAttributes !== nextState.showAttributes) {\n      return true;\n    }\n\n    if (!sameFields(this.props, nextProps, [ [\"open\"], [\"category\"] ])) {\n      return true;\n    }\n\n    if (!sameArray(nextProps.selectedAttributes, this.props.selectedAttributes, sameSelectedAttribute)) {\n      return true;\n    }\n\n    return false;\n\n  }\n\n  render() {\n\n    const containers = this.props.selectedAttributes.filter(c => this.state.showAttributes || c.attribute.enabled);\n    const hasUnavailableAttributes = this.props.selectedAttributes.some(c => c.attribute.enabled === false);\n\n    return ( \n      <Drawer\n        className=\"attributes-dialog\"\n        anchor=\"bottom\"\n        open={this.props.open}\n        onClose={this.props.onClose}\n      >\n        <DialogTitle className='dialog-title'>\n          <div className=\"close-icon\" onClick={() => this.props.onClose()} />\n          <CategorySwitch\n            categories={this.props.categories}\n            selected={this.props.category}\n            onSwitchCategory={cat => this.props.onSwitchCategory(cat)}\n          />\n          <div className={`hide-menu ${hasUnavailableAttributes ? \"\" : \"disabled\"}`}>\n            Show unavailable attributes\n            <Switch\n              checked={this.state.showAttributes}\n              onChange={evt => this.setState({ showAttributes: evt.target.checked })}\n              value={this.state.showAttributes}\n              color=\"primary\"\n              size=\"small\"\n            />\n          </div>\n        </DialogTitle>\n        <DialogContent className=\"dialog-content-container\">\n          <FlipMove className=\"tags-dialog-menu\">\n            {containers.map(container => \n              <AddAttributeRow\n                key={container.attribute.name}\n                attribute={container.attribute}\n                selected={container.selected}\n                value={container.value}\n              />\n            )}\n          </FlipMove>\n        </DialogContent>\n      </Drawer>\n    );\n\n  }\n}\n\nexport default connect<PropsFromStore, DispatchProps, OwnProps, StoreDefinition>(mapStateToProps, mapActionsToProps)(AttributesDialog);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { StoreDefinition } from '../../definitions/redux.store';\nimport * as ReduxActions from '../../definitions/redux.actions';\nimport CategoryRow from './CategoryRow';\nimport \"../../style/category-table/CategoryTable.scss\";\nimport { sameArray } from '../../support/comparison';\nimport AttributesDialog from './attributes/AttributesDialog';\n\ninterface PropsFromStore {\n  categoryNames: string[];\n}\n\ninterface DispatchProps { };\n\ninterface OwnProps { };\n\ninterface State {\n  openCategory?: string;\n}\n\nconst mapStateToProps = (state: StoreDefinition): PropsFromStore => ({\n  categoryNames: state.categories.map(cat => cat.name)\n});\n\nconst mapActionsToProps = (dispatch: ReduxActions.StoreDispatch): DispatchProps => ({ });\n\ntype Props = PropsFromStore & DispatchProps & OwnProps;\n\nclass CategoryTable extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { openCategory: undefined };\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n\n    if (!sameArray(nextProps.categoryNames, this.props.categoryNames)) {\n      return true;\n    };\n\n    if (nextState.openCategory !== this.state.openCategory) {\n      return true;\n    }\n\n    return false;\n\n  }\n\n  render() {\n\n    const isLoading = this.props.categoryNames.length === 0;\n\n    return (\n      <div className=\"category-table\">\n        {this.props.categoryNames.map((cat, i) => <CategoryRow key={i} category={cat} onOpenCategory={() => this.setState({ openCategory: cat})} />)}\n        {isLoading && <div>Loading categories, please wait ...</div>}\n        <AttributesDialog\n          category={this.state.openCategory}\n          open={this.state.openCategory !== undefined}\n          onSwitchCategory={cat => this.setState({ openCategory: cat })}\n          onClose={() => this.setState({ openCategory: undefined })}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default connect<PropsFromStore, DispatchProps, OwnProps, StoreDefinition>(mapStateToProps, mapActionsToProps)(CategoryTable);\n","import CategoryTable from './CategoryTable';\n\nexport default CategoryTable;","import * as React from 'react';\nimport \"../../style/results-viewer/SimilarityFlags.scss\";\nimport { ArmSimilarityResult } from '../../definitions/hbcp-declarations';\nimport { withStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\n\ninterface Props {\n  result: ArmSimilarityResult;\n}\n\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: 'rgba(0, 0, 0, 0.87)',\n    boxShadow: theme.shadows[1],\n    fontSize: 11,\n  },\n}))(Tooltip);\n\nexport default class SimilarityFlags extends React.Component<Props> {\n\n  render() {\n\n    const { isSimilarIntervention, isSimilarPopulation } = this.props.result;\n\n    return (\n      <div className=\"similarity-flags\">\n        <LightTooltip title={isSimilarIntervention ? \"Similar intervention\": \"Different intervention\"}>\n          <span className={isSimilarIntervention ? \"similar-tag\" : \"different-tag\"}>\n            <span className=\"intervention-icon\" />\n          </span>\n        </LightTooltip>\n        <LightTooltip title={isSimilarPopulation ? \"Similar population\": \"Different population\"}>\n          <span className={isSimilarPopulation ? \"similar-tag\" : \"different-tag\"}>\n            <span className=\"population-icon\" />\n          </span>\n        </LightTooltip>\n      </div>\n    );\n\n  }\n\n}\n","import * as React from 'react';\nimport \"../../style/results-viewer/SummaryTable.scss\";\nimport { ArmSimilarityResult } from '../../definitions/hbcp-declarations';\nimport { withStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\n\ninterface Props {\n  result: ArmSimilarityResult;\n}\n\ninterface State {\n  collapsed: boolean;\n}\n\nconst collapsedIcon         = <span className=\"collapsed-icon\" />;\n// const expandedIcon          = <span className=\"expanded-icon\" />;\nconst outcomeIcon           = <span className=\"outcome-icon\" />;\nconst similarAttributesIcon = <span className=\"similar-attributes-icon\" />;\nconst leftDataIcon          = <span className=\"left-data-icon\" />;\nconst intersectionDataIcon  = <span className=\"intersection-data-icon\" />;\nconst rightDataIcon         = <span className=\"right-data-icon\" />;\n\nconst LightTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: 'rgba(0, 0, 0, 0.87)',\n    boxShadow: theme.shadows[1],\n    fontSize: 11,\n  },\n}))(Tooltip);\n\nconst BCTs = (\n  <LightTooltip title=\"Behavioural Change Techniques\">\n    <span className=\"bct-text\">BCTs</span>\n  </LightTooltip>\n)\n\ninterface AttributeListProps {\n  attributes: string[];\n  title: string | JSX.Element;\n  noTitle: string | JSX.Element;\n}\n\nfunction ItalicCommaSeparetedList(props: AttributeListProps) {\n\n  let attributes: JSX.Element[] = [];\n\n  props.attributes.forEach((a, i) => {\n    attributes.push(<span key={i*2} className=\"bct-box\">{a}</span>);\n    // if (i !== props.attributes.length - 1) {\n    //   attributes.push(<span> </span>);\n    // }\n  });\n\n  return (\n    <div className=\"bct-container\">\n      <span className=\"bct-title\">{props.attributes.length === 0 ? props.noTitle : props.title }</span>\n      {attributes}\n    </div>\n  );\n}\n\nexport default class SummaryTable extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { collapsed: true };\n  }\n\n  getOutcomeValue() {\n    if (!this.props.result.outcomeValue || this.props.result.outcomeValue === -1) {\n      return \"There is no known outcome value.\";\n    } else {\n      return <>Outcome value is <span className=\"outcome-value-number\">{this.props.result.outcomeValue}%</span> ({this.props.result.followUp}).</>;\n    }\n  }\n\n  getSimilarAttributes() {\n\n    const similarities = this.props.result.attributeSimilarities;\n    const attributes = similarities.map(a => `${a.attribute.name} (${a.similarity.toFixed(2)})`)\n\n    return (\n      <ItalicCommaSeparetedList\n        title=\"Attribute similarities: \"\n        noTitle=\"No similar attributes found.\"\n        attributes={attributes}\n      />\n    );\n\n  }\n\n  getInterventionsInQuery() {\n\n    const onlyInQuery = this.props.result.interventionsOnlyInQuery;\n    const interventions = onlyInQuery.map(int => `${int.name.trim()}`)\n\n    return (\n      <ItalicCommaSeparetedList\n        title={<>{BCTs} queried but not found in arm: </>}\n        noTitle={<>All the {BCTs} specified in the query have a match.</>}\n        attributes={interventions}\n      />\n    );\n\n  }\n\n  getInterventionsInCommon() {\n\n    const inCommon = this.props.result.interventionsInCommon;\n    const interventions = inCommon.map(int => `${int.name.trim()}`)\n\n    return (\n      <ItalicCommaSeparetedList\n        title={<>Common {BCTs} between query and arm: </>}\n        noTitle={<>No {BCTs} in common between query and arm.</>}\n        attributes={interventions}\n      />\n    );\n\n  }\n\n  getInterventionsInArm() {\n\n    const onlyInArm = this.props.result.interventionsOnlyInArm;\n    const interventions = onlyInArm.map(int => `${int.name.trim()}`)\n\n    return (\n      <ItalicCommaSeparetedList\n        title={<>Other {BCTs} found in arm: </>}\n        noTitle={<>All the {BCTs} found in the arm have a match.</>}\n        attributes={interventions}\n      />\n    );\n\n\n  }\n\n  render() {\n\n    let summaryData;\n\n    const wrap = (o: any) => <span className=\"table-cell\">{o}</span>\n\n    if (this.state.collapsed) {\n\n      summaryData = (\n        <div\n          className=\"summary-table\"\n          onClick={() => this.setState({ collapsed: !this.state.collapsed })}\n        >\n          <div>{wrap(outcomeIcon)} {wrap(this.getOutcomeValue())}</div>\n          <div>\n            {wrap(collapsedIcon)}\n            {wrap(<span>{similarAttributesIcon} {leftDataIcon} {intersectionDataIcon} {rightDataIcon}</span>)}\n          </div>\n        </div>\n      );\n\n    } else {\n\n      summaryData = (\n        <div\n          className=\"summary-table\"\n          onClick={() => this.setState({ collapsed: !this.state.collapsed })}\n        >\n            <div>{wrap(outcomeIcon)} {wrap(this.getOutcomeValue())}</div>\n            <div>{wrap(similarAttributesIcon)} {wrap(this.getSimilarAttributes())}</div>\n            <div>{wrap(leftDataIcon)} {wrap(this.getInterventionsInQuery())}</div>\n            <div>{wrap(intersectionDataIcon)} {wrap(this.getInterventionsInCommon())}</div>\n            <div>{wrap(rightDataIcon)} {wrap(this.getInterventionsInArm())}</div>\n            {/* <div>{wrap(expandedIcon)} {wrap(\"\")}</div> */}\n        </div>\n      );\n    }\n\n    return summaryData;\n\n  }\n\n}\n","import * as React from 'react';\nimport \"../../style/results-viewer/SingleResult.scss\";\nimport { ArmSimilarityResult } from '../../definitions/hbcp-declarations';\nimport SimilarityFlags from './SimilarityFlags';\nimport SummaryTable from './SummaryTable';\n\ninterface Props {\n  result: ArmSimilarityResult;\n}\n\nexport default class SingleResult extends React.Component<Props> {\n\n  render() {\n\n    return (\n      <li className=\"single-result-element\">\n        <SimilarityFlags result={this.props.result} />\n        <div className=\"main-container\">\n          <div className=\"title-bar\">\n            <span className=\"document-icon\" />\n            <span className=\"document-name\">{this.props.result.title}</span>\n          </div>\n          <div className=\"summary-container\">\n            <SummaryTable result={this.props.result} />\n          </div>\n        </div>\n      </li>\n    );\n\n  }\n\n}\n","import * as React from 'react';\nimport \"../../style/results-viewer/ResultsList.scss\";\nimport { ArmSimilarityResult } from '../../definitions/hbcp-declarations';\nimport SingleResult from \"./SingleResult\";\n// import FlipMove from 'react-flip-move';\n\ninterface Props {\n  results: ArmSimilarityResult[];\n}\n\nexport default class ResultsList extends React.Component<Props> {\n\n  render() {\n\n    return (\n      <div className=\"results-list-container\">\n        {/* <div className=\"results-summary\">\n          {this.props.results.length} relevant documents found.\n        </div> */}\n        <ul>\n          {this.props.results.map( (r, i) => <SingleResult key={r.doc} result={r} />)}\n        </ul>\n      </div>\n    );\n\n  }\n\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { StoreDefinition } from '../../definitions/redux.store';\nimport * as ReduxActions from '../../definitions/redux.actions';\nimport \"../../style/results-viewer/ResultsViewer.scss\";\nimport { ArmSimilarityResult } from '../../definitions/hbcp-declarations';\nimport ResultsList from './ResultsList';\n\ninterface PropsFromStore {\n  results?: ArmSimilarityResult[];\n  isLoading: boolean;\n  hasSelection: boolean;\n}\n\ninterface DispatchProps { };\n\ninterface OwnProps { };\n\nconst mapStateToProps = (state: StoreDefinition): PropsFromStore => ({ \n  results: state.results,\n  isLoading: state.isFetchingResults,\n  hasSelection: state.selection.length > 0\n});\n\nconst mapActionsToProps = (dispatch: ReduxActions.StoreDispatch): DispatchProps => ({ });\n\ntype Props = PropsFromStore & DispatchProps & OwnProps;\n\nclass ResultsViewer extends React.Component<Props> {\n\n  render() {\n\n    if (!this.props.hasSelection) {\n      return (\n        <div className=\"results-viewer\">\n          Make a selection to start exploring matching documents.\n        </div>\n      );\n    } else {\n      return (\n        <div className={`results-viewer ${this.props.isLoading ? \"fetching\" : \"\"}`}>\n          <i className=\"fetching-data-spinner fas fa-spinner fa-spin\" />\n          {this.props.results === undefined\n            ? \"Loading results, please wait ...\"\n            : <ResultsList results={this.props.results} />\n          }\n        </div>\n      );\n    }\n\n  }\n\n}\n\nexport default connect<PropsFromStore, DispatchProps, OwnProps, StoreDefinition>(mapStateToProps, mapActionsToProps)(ResultsViewer);\n","import ResultsViewer from './ResultsViewer';\n\nexport default ResultsViewer;","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { StoreDefinition } from '../../definitions/redux.store';\nimport * as ReduxActions from '../../definitions/redux.actions';\nimport \"../../style/predicted-outcome/PredictedOutcomeValue.scss\";\nimport { showWarning } from '../../support/Alert';\n\ninterface PropsFromStore {\n  value?: number;\n  followUp?: string;\n  isLoading: boolean;\n  hasSelection: boolean;\n  hasResults: boolean;\n}\n\ninterface DispatchProps { };\n\ninterface OwnProps { };\n\nconst mapStateToProps = (state: StoreDefinition): PropsFromStore => ({ \n  value: state.predictedOutcomeValue,\n  followUp: state.followUp,\n  isLoading: state.isFetchingResults,\n  hasSelection: state.selection.length > 0,\n  hasResults: state.results !== undefined\n});\n\nconst mapActionsToProps = (dispatch: ReduxActions.StoreDispatch): DispatchProps => ({ });\n\ntype Props = PropsFromStore & DispatchProps & OwnProps;\n\nclass PredictedOutcomeValue extends React.Component<Props> {\n\n  render() {\n\n    const hasFollowUp = this.props.followUp !== undefined;\n    const hasOutcomeValue = this.props.value !== undefined;\n\n    if ((hasFollowUp && !hasOutcomeValue) || (!hasFollowUp && hasOutcomeValue)) {\n      showWarning(\"Follow up and predictected outcome value must be both defined or undefined, mixing not allowed!\");\n    }\n\n    if (!this.props.hasSelection) {\n      return (\n        <div className=\"predicted-outcome-value\">\n          Make a selection to predict outcome value and associated follow up.\n        </div>\n      );\n    } else {\n\n      const predictedValueString = !hasFollowUp\n          ? \"Predicted outcome value is not available.\"\n          : <>Predicted outcome value is <span className=\"percentage-number\">{this.props.value}%</span> ({this.props.followUp}).</>;\n\n      return (\n        <div className={`predicted-outcome-value ${this.props.isLoading ? \"fetching\" : \"\"}`}>\n          <i className=\"fetching-data-spinner fas fa-spinner fa-spin\" />\n          {!this.props.hasResults \n            ? \"Loading predicted outcome value, please wait ...\"\n            : predictedValueString\n          }\n        </div>\n      );\n    }\n\n  }\n\n}\n\nexport default connect<PropsFromStore, DispatchProps, OwnProps, StoreDefinition>(mapStateToProps, mapActionsToProps)(PredictedOutcomeValue);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { StoreDefinition } from '../definitions/redux.store';\nimport Header from './Header';\nimport * as ReduxActions from '../definitions/redux.actions';\nimport \"../style/App.scss\";\nimport CategoryTable from './category-table';\nimport ResultsViewer from './results-viewer';\nimport { bootstrap } from '../redux/actions.bootstrap';\nimport PredictedOutcomeValue from './predicted-outcome/PredictedOutcomeValue';\n\ninterface AppStoreProps { }\n\ninterface AppDispatchProps {\n  bootstrap(): void;\n}\n\nconst mapStateToProps = (state: StoreDefinition): AppStoreProps => ({ });\n\nconst mapActionsToProps = (dispatch: ReduxActions.StoreDispatch): AppDispatchProps => ({\n  bootstrap: () => dispatch( bootstrap() )\n});\n\ntype AppProps = AppStoreProps & AppDispatchProps;\n\nclass App extends React.Component<AppProps> {\n\n  componentDidMount() {\n    this.props.bootstrap();\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        <Header />\n\n        <div className=\"box\">\n          <p className=\"intro-paragraph\">\n            Welcome to the Human Behaviour Change Project (HBCP) prediction demo! The HBCP aims to use Artificial Intelligence (AI) to \n            automate the extraction and use of information from behaviour change intervention evaluation reports.&nbsp;\n            This demo allows you \n            to estimate a potential smoking quit rate given a set of population features and a intervention.&nbsp;\n            Results are based on \n            knowledge automatically extracted from more than 500 intervention evaluation reports.\n          </p>\n        </div>\n\n        <div className=\"box\">\n          <CategoryTable />\n        </div>\n\n        <div className=\"box\">\n          <PredictedOutcomeValue />\n        </div>\n\n        <div className=\"box\">\n          <ResultsViewer />\n        </div>\n\n        <ToastContainer\n          toastClassName=\"custom-toast-message\"\n          className=\"custom-toast-container\"\n          position=\"bottom-center\"\n          autoClose={3000}\n          hideProgressBar\n          pauseOnHover\n          closeOnClick\n          pauseOnFocusLoss={false}\n        />\n\n      </div>\n    );\n  }\n\n}\n\nexport default connect<AppStoreProps, AppDispatchProps, {}, StoreDefinition>(mapStateToProps, mapActionsToProps)(App);\n","// import { showError } from '../controller/Alert';\nimport * as ReduxActions from '../definitions/redux.actions';\nimport axios from 'axios';\nimport { showError } from '../support/Alert';\nimport { AllAttributesByType } from '../definitions/server-responses';\n\nexport function bootstrap(): ReduxActions.VoidAction {\n  return async (dispatch, getState) => {\n\n    try {\n      const categoryList = await axios.get<AllAttributesByType>(\"/api/predict/options/allbytype\");\n\n      const action: ReduxActions.BootrstrapDone = {\n        type: ReduxActions.TypeKeys.BOOTSTRAP_DONE,\n        payload: categoryList.data\n      };\n      \n      return dispatch(action);\n  \n    } catch(err) {\n      console.error(\"Impossible to bootstrap: \", err);\n      showError(\"Impossible to bootstrap.\");\n    }\n\n  };\n}","import * as ReduxActions from '../definitions/redux.actions';\nimport { StoreDefinition } from '../definitions/redux.store';\nimport update from 'immutability-helper';\nimport { showWarning } from '../support/Alert';\n\n// const increment = (i: number) => i + 1;\n\nconst reducer = (state: StoreDefinition, action: ReduxActions.ActionTypes): StoreDefinition => {\n\n  switch (action.type) {\n\n    case ReduxActions.TypeKeys.REDUX_INIT:\n      return state;\n\n    case ReduxActions.TypeKeys.BOOTSTRAP_DONE:\n      return { ...state, ...action.payload };\n\n    case ReduxActions.TypeKeys.ATTRIBUTE_SELECTED:\n      return update(state, { selection: { $push: [ action.payload.selection ] } });\n\n    case ReduxActions.TypeKeys.ATTRIBUTE_UPDATED:\n      const pos = state.selection.findIndex(s => s.id === action.payload.selection.id);\n      return update(state, { selection: { [pos]: { $set: action.payload.selection }}});\n\n    case ReduxActions.TypeKeys.ATTRIBUTE_CLEARED:\n      return update(state, { selection: { $set: state.selection.filter(s => s.id !== action.payload.attributeId) } });\n\n    case ReduxActions.TypeKeys.START_LOADING_RESULTS:\n      return { ...state, isFetchingResults: true };\n\n    case ReduxActions.TypeKeys.FINISH_LOADING_RESULTS:\n      return { ...state, isFetchingResults: false };\n\n    case ReduxActions.TypeKeys.SET_RESULTS:\n      return { \n        ...state,\n        results: action.payload.results,\n        predictedOutcomeValue: action.payload.predictedOutcomeValue,\n        followUp: action.payload.followUp\n      };\n\n    case ReduxActions.TypeKeys.CLEAR_RESULTS:\n      return { ...state, results: undefined };\n  \n    default:\n      console.warn(`Action ignored: `, action);\n      showWarning(\"A redux action has been ignored, please check console.\")\n      return state;\n\n  }\n\n};\n\nexport default reducer;","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './style/fonts/helvetica-neue-ibm/css/importer.css';\nimport './style/style.scss';\nimport configureStore from './redux/store';\nimport { Provider } from 'react-redux';\n\n// mandatory\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css'\n\nconst configuredStore = configureStore();\n\nReactDOM.render(\n  <Provider store={configuredStore}>\n    <App />\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n);\n","import { applyMiddleware, Store, createStore } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducer from './reducer';\nimport { StoreDefinition } from '../definitions/redux.store';\n\n// const conf: Common.Configuration = require('../conf.json');\n\nexport default function configureStore() {\n\n  const initialState = {\n    categories: [],\n    selection: [],\n    isFetchingResults: false,\n    results: undefined\n  };\n\n  // initialState.services.explanation.status.selected = true;\n\n  const middleware = applyMiddleware( thunk, logger );\n  \n  const store: Store<StoreDefinition> = createStore(reducer, initialState, middleware);\n  \n  return store;\n\n}\n"],"sourceRoot":""}